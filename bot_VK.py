import requests
import telebot
from telebot import types
import os
import json

# bot token
bot_token = telebot.TeleBot('')

# users base and admins list
admins = [581843384]
users_base = {}

# buttons
yes_no_buttons = types.InlineKeyboardMarkup()
button_yes = types.InlineKeyboardButton("–î–∞", callback_data='yes')
button_no = types.InlineKeyboardButton("–ù–µ—Ç", callback_data='no')
yes_no_buttons.add(button_yes, button_no)

function_buttons = types.InlineKeyboardMarkup()
button_friends = types.InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å –¥—Ä—É–∑–µ–π", callback_data='friends')
button_community = types.InlineKeyboardButton("–£—á–∞—Å—Ç–Ω–∏–∫–∏ –±–µ—Å–µ–¥", callback_data='community')
function_buttons.add(button_friends, button_community)

reg_buttons = types.InlineKeyboardMarkup()
button1 = types.InlineKeyboardButton("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è!", callback_data='registration')
reg_buttons.add(button1)

url_address_numbers = types.InlineKeyboardMarkup()
button_url = types.InlineKeyboardButton("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è",
                                        url='https://docs.google.com/document/d/1qdqsaRUsMwpPrcEjiucdTIWzlrnKmuyoYwNBjlvbEYM/edit?usp=sharing')
url_address_numbers.add(button_url)

url_address_token = types.InlineKeyboardMarkup()
button_url = types.InlineKeyboardButton("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è",
                                        url='https://docs.google.com/document/d/1lnDe8vB5upqib-G0eVRunXSNu1TopMlfMjTKtVyAkm8/edit?usp=sharing')
url_address_token.add(button_url)


def check_token(token):
    if token[:5] != 'vk1.a':
        return False
    if "&expires_in" in token:
        return False
    if "&" in token:
        return False
    else:
        return True


try:
    @bot_token.message_handler(commands=['start'])
    def start(message):
        bot_token.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç ‚úå\n\n–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —Ç—ã –º–æ–≥ –Ω–µ—Å–∫–æ–ª—å–∫–æ "
                                                "–æ–±–ª–µ–≥—á–∏—Ç—å —Å–µ–±–µ —Ä–∞–±–æ—Ç—É –∏ —É–∑–Ω–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, "
                                                "–∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è —É —Ç–µ–±—è –≤ –¥—Ä—É–∑—å—è—Ö –∏–ª–∏ —Å–æ—Å—Ç–æ—è—Ç –≤ —Ç–≤–æ–µ–π –±–µ—Å–µ–¥–µ-–∫–æ–º—å—é–Ω–∏—Ç–∏ "
                                                "–≤ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ!\n\n–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Ç–µ–±–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, "
                                                "–Ω–∞–∂–∏–º–∞–π –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ —Å–ª–µ–¥—É–π –¥–∞–ª—å–Ω–µ–π—à–∏–º —É–∫–∞–∑–∞–Ω–∏—è–º)",
                               reply_markup=reg_buttons)


    @bot_token.callback_query_handler(func=lambda callback: callback.data == 'registration')
    def registration_token(call):
        users_base[call.message.chat.id] = []
        msg = bot_token.send_message(call.message.chat.id,
                                     '–ù—É, –ø—Ä–∏—Å—Ç—É–ø–∏–º! üí´\n\n–°–µ–π—á–∞—Å —Ç–µ–±–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–µ —Ç–æ–∫–µ–Ω —Ç–≤–æ–µ–π —Å—Ç—Ä–∞–Ω–∏—á–∫–∏ '
                                     '–í–ö\n\nüî¥ <b>–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é! üëá</b>',
                                     reply_markup=url_address_token, parse_mode='html')

        bot_token.register_next_step_handler(msg, registration_numbers)


    def registration_numbers(message):
        if check_token(message.text):
            users_base[message.chat.id].append(message.text)
            msg = bot_token.send_message(message.chat.id, '‚úÖ –¢–æ–∫–µ–Ω –≤—ã–≥–ª—è–¥–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ '
                                                          '–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!\n\n–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –Ω–æ–º–µ—Ä–∞ –±–µ—Å–µ–¥ —á–µ—Ä–µ–∑ '
                                                          '–∑–∞–ø—è—Ç—É—é\n\nüî¥ <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—é –Ω–æ–º–µ—Ä–∞ –±–µ—Å–µ–¥—ã '
                                                          'üëá</b>', reply_markup=url_address_numbers,
                                         parse_mode='html')
            bot_token.register_next_step_handler(msg, registration_check)
        else:
            bot_token.send_message(message.chat.id,
                                   '<b>–í–≤–µ–¥–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω</b>\n–ü—Ä–æ—á–∏—Ç–∞–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –∏ –Ω–∞—á–Ω–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∑–∞–Ω–æ–≤–æ\n\n'
                                   '–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞–∂–º–∏ –Ω–∞ /start', reply_markup=url_address_token, parse_mode='html')


    def registration_check(message):
        users_base[message.chat.id].append(message.text.split(','))
        bot_token.send_message(message.chat.id,
                               "–ü—Ä–æ–≤–µ—Ä—å –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –±–µ—Å–µ–¥—ã)\n\n" + get_chat_name(users_base[message.chat.id][1],
                                                                               message.chat.id) +
                               "\n–í—ã–±—Ä–∞–Ω—ã –≤–µ—Ä–Ω—ã–µ –∫–æ–º—å—é–Ω–∏—Ç–∏?", reply_markup=yes_no_buttons)


    @bot_token.callback_query_handler(func=lambda callback: callback.data == 'yes')
    def registration_end(call):
        bot_token.send_message(call.message.chat.id, f'–¢—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à—ë–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é! üß°'
                                                     f'–í–≤–µ–¥—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n\n'
                                                     f'–¢–æ–∫–µ–Ω: {users_base[call.message.chat.id][0]}\n\n'
                                                     f'–ù–æ–º–µ—Ä–∞ –±–µ—Å–µ–¥: {users_base[call.message.chat.id][1]}\n\n'
                                                     f'–ï—Å–ª–∏ –≥–¥–µ-—Ç–æ –±—ã–ª–∞ –¥–æ–ø—É—â–µ–Ω–∞ –æ—à–∏–±–∫–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start\n\n'
                                                     f'–ï—Å–ª–∏ –ø–æ—è–≤—è—Ç—Å—è –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ä–∞–±–æ—Ç–µ —Å –±–æ—Ç–æ–º - /help')

        bot_token.send_message(call.message.chat.id, f'–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—É—é —Ç–µ–±–µ –∫–æ–º–∞–Ω–¥—É', reply_markup=function_buttons)


    @bot_token.callback_query_handler(func=lambda callback: callback.data == 'no')
    def registration_false(call):
        bot_token.send_message(call.message.chat.id, '–ü–æ–≤—Ç–æ—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤–≤–µ–¥—è –∫–æ–º–∞–Ω–¥—É /start')


    def get_friends_vk_api(user_id):
        response = requests.get('https://api.vk.com/method/friends.get',
                                params={
                                    'access_token': users_base[user_id][0],
                                    'v': 5.131
                                })

        return response.json()['response']['items']


    def get_community_users_vk_api(user_id):
        result = []
        com_name = users_base[user_id][1]
        for number in com_name:
            response = requests.get('https://api.vk.com/method/messages.getChat',
                                    params={
                                        'access_token': users_base[user_id][0],
                                        'v': 5.131,
                                        'chat_id': str(number)
                                    })

            result.extend(response.json()['response']['users'])
        return result


    def get_chat_name(com_name, user_id):
        result = ''
        for number in com_name:
            response = requests.get('https://api.vk.com/method/messages.getChat',
                                    params={
                                        'access_token': users_base[user_id][0],
                                        'v': 5.131,
                                        'chat_id': str(number)
                                    })

            result += response.json()['response']['title'] + '\n'
        return result


    @bot_token.callback_query_handler(func=lambda callback: callback.data == 'community')
    def get_cummunity_users(call):
        bot_token.send_message(581843384, f"–ü—Ä–∏–≤–µ—Ç ‚úå\n<b>@{call.message.chat.username}</b> –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –±–æ—Ç–∞ ",
                               parse_mode='html')

        bot_token.send_message(call.message.chat.id,
                               "–ë–æ—Ç —É–∂–µ –≤–æ –≤—Å—é –≥–æ—Ç–æ–≤–∏—Ç —Å–ø–∏—Å–æ–∫ —Ç–≤–æ–∏—Ö —É—á–µ–Ω–∏–∫–æ–≤, —Å—Ç–æ–∏—Ç —Ç–æ–ª—å–∫–æ –Ω–µ–º–Ω–æ–≥–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å ‚ú®")
        try:
            result = get_community_users_vk_api(call.message.chat.id)

            with open(call.message.chat.username + '.txt', 'w+') as file:
                for i in result:
                    file.writelines('https://vk.com/id' + str(i) + '\n')

            with open(call.message.chat.username + '.txt', 'r') as file:
                bot_token.send_document(call.message.chat.id, file)
            os.remove(call.message.chat.username + '.txt')
            bot_token.send_message(call.message.chat.id,
                                   f"–°–ø–∏—Å–æ–∫ –±—ã–ª –ø–æ–ª—É—á–µ–Ω! –°—É–º–º–∞ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º—å—é–Ω–∏—Ç–∏: {len(result)}\n\n"
                                   f"–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=function_buttons)

        except:
            bot_token.send_message(call.message.chat.id, "–í –±–æ—Ç–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞. –ü–æ–≤—Ç–æ—Ä–∏ —Å–Ω–æ–≤–∞. /start")
            pass


    @bot_token.callback_query_handler(func=lambda callback: callback.data == 'friends')
    def get_friends_bot(call):
        bot_token.send_message(581843384, f"–ü—Ä–∏–≤–µ—Ç ‚úå\n<b>@{call.message.chat.username}</b> –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –±–æ—Ç–∞ ",
                               parse_mode='html')

        bot_token.send_message(call.message.chat.id,
                               "–ë–æ—Ç —É–∂–µ –≤–æ –≤—Å—é –≥–æ—Ç–æ–≤–∏—Ç —Å–ø–∏—Å–æ–∫ —Ç–≤–æ–∏—Ö —É—á–µ–Ω–∏–∫–æ–≤, —Å—Ç–æ–∏—Ç —Ç–æ–ª—å–∫–æ –Ω–µ–º–Ω–æ–≥–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å ‚ú®")

        try:
            result = get_friends_vk_api(call.message.chat.id)

            with open(call.message.chat.username + '.txt', 'w+') as file:
                for i in result:
                    file.writelines('https://vk.com/id' + str(i) + '\n')

            with open(call.message.chat.username + '.txt', 'r') as file:
                bot_token.send_document(call.message.chat.id, file)
            os.remove(call.message.chat.username + '.txt')

            bot_token.send_message(call.message.chat.id, f"–°–ø–∏—Å–æ–∫ –±—ã–ª –ø–æ–ª—É—á–µ–Ω! –í—Å–µ–≥–æ –¥—Ä—É–∑–µ–π: {len(result)}\n\n"
                                                         f"–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=function_buttons)
        except:
            bot_token.send_message(call.message.chat.id, "–í –±–æ—Ç–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞. –ü–æ–≤—Ç–æ—Ä–∏ —Å–Ω–æ–≤–∞. /start")
            pass


    @bot_token.message_handler(commands=['help'])
    def help(message):
        bot_token.send_message(message.chat.id, f'<b>–†–∞–∑–¥–µ–ª –ø–æ–º–æ—â–∏: </b>\n\n'
                                                f'<b>/help</b> - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞\n'
                                                f'<b>/info</b> - –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, —Ö—Ä–∞–Ω—è—â–µ–π—Å—è –≤ –±–æ—Ç–µ\n'
                                                f'<b>/func</b> - –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞\n'
                                                f'<b>/start</b> - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ –±–æ—Ç–µ —Å —Å–∞–º–æ–≥–æ –Ω–∞—á–∞–ª–∞\n\n'
                                                f'<b>/help_me</b> - –ø—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –º–æ–∂–µ—à—å '
                                                f'–Ω–∞–ø–∏—Å–∞—Ç—å –∑–∞–ø—Ä–æ—Å —Ñ–æ—Ä–º–∞—Ç–∞: /help_me *–í–æ–ø—Ä–æ—Å* ', parse_mode='html')


    @bot_token.message_handler(commands=['help_me'])
    def help_me(message):
        bot_token.send_message(581843384,
                               '–ó–∞–ø—Ä–æ—Å –æ—Ç @' + message.chat.username + ' ' + str(message.chat.id) + '\n' + message.text[message.text.find(' '):])
        bot_token.send_message(message.chat.id, f'–¢–≤–æ–π –∑–∞–ø—Ä–æ—Å –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!')


    @bot_token.message_handler(commands=['info'])
    def info(message):
        if message.chat.id in users_base:
            bot_token.send_message(message.chat.id, f'–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ –±–æ—Ç–µ: üß°\n\n'
                                                    f'–¢–æ–∫–µ–Ω: {users_base[message.chat.id][0]}\n\n'
                                                    f'–ù–æ–º–µ—Ä–∞ –±–µ—Å–µ–¥: {users_base[message.chat.id][1]}\n\n'
                                                    f'–ï—Å–ª–∏ –≥–¥–µ-—Ç–æ –±—ã–ª–∞ –¥–æ–ø—É—â–µ–Ω–∞ –æ—à–∏–±–∫–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start')

            bot_token.send_message(message.chat.id, f'–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—É—é —Ç–µ–±–µ –∫–æ–º–∞–Ω–¥—É', reply_markup=function_buttons)
        else:
            bot_token.send_message(message.chat.id, f'–¢—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!', reply_markup=reg_buttons)


    @bot_token.message_handler(commands=['func'])
    def func(message):
        if message.chat.id in users_base:
            bot_token.send_message(message.chat.id, f'–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—É—é —Ç–µ–±–µ –∫–æ–º–∞–Ω–¥—É', reply_markup=function_buttons)
        else:
            bot_token.send_message(message.chat.id, f'–¢—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!', reply_markup=reg_buttons)
except:
    pass

# admin commands
@bot_token.message_handler(commands=['answer'])
def answer(message):
    if message.chat.id in admins or message.chat.username in admins:
        user_sent = message.text.split()[1]
        bot_token.send_message(user_sent, message.text[message.text.find(' '):])
        bot_token.send_message(message.chat.id, '–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω')
    else:
        bot_token.send_message(message.chat.id, 'You have no access')

@bot_token.message_handler(commands=['download'])
def download(message):
    if message.chat.id in admins or message.chat.username in admins:
        capitals_json = json.dumps(users_base)

        with open("users.json", "w") as my_file:
            my_file.write(capitals_json)

        with open("users.json", 'r') as file:
            bot_token.send_document(message.chat.id, file)
    else:
        bot_token.send_message(message.chat.id, 'You have no access')


@bot_token.message_handler(commands=['sent'])
def sent(message):
    if message.chat.id in admins or message.chat.username in admins:
        for user in users_base:
            bot_token.send_message(user, message.text[message.text.find(' '):])
        bot_token.send_message(message.chat.id, '–†–∞—Å—Å—ã–ª–∫–∞ –±—ã–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞')
    else:
        bot_token.send_message(message.chat.id, 'You have no access')


@bot_token.message_handler(commands=['stat'])
def stat(message):
    if message.chat.id in admins or message.chat.username in admins:
        bot_token.send_message(message.chat.id, '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:'
                                          f'\n{len(users_base)} - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
    else:
        bot_token.send_message(message.chat.id, 'You have no access')


@bot_token.message_handler(commands=['give_admin'])
def give_admin(message):
    if message.chat.id in admins or message.chat.username in admins:
        admins.append(message.text[message.text.find(' '):][1:])
        bot_token.send_message(message.chat.id, '–∞–¥–º–∏–Ω–∫–∞ –≤—ã–¥–∞–Ω–∞')
    else:
        bot_token.send_message(message.chat.id, 'You have no access')


@bot_token.message_handler(commands=['help_admin'])
def help_admin(message):
    if message.chat.id in admins or message.chat.username in admins:
        bot_token.send_message(message.chat.id, '–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∫–∏:\n\n'
                                                '/give_admin - –¥–∞—Ç—å –∞–¥–º–∏–Ω–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n'
                                                '/stat - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n'
                                                '/sent - —Ä–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π\n'
                                                '/download - —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n'
                                                '/answer - –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å\n')
    else:
        bot_token.send_message(message.chat.id, 'You have no access')


bot_token.polling(none_stop=True)
